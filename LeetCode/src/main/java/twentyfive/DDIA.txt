DATA MODELS AND QUERY LANGUAGES --> The format in which you give the database the data
and the mechanism by which you can ask it again later

Modeling data is one of the most crucial aspects of software development.
A well-designed data model enhances our understanding of the problem and
profoundly impacts the software development process.

Layered Approach to Data Modeling
Applications are typically built by layering one data model on top of another.
The key question at each layer is:
How is this data represented in terms of the next-lower layer?
In complex applications, multiple intermediary layers—such as APIs built on top of
other APIs—help abstract underlying complexities.
These abstractions allow different teams
(e.g., database engineers and application developers) to collaborate effectively without needing deep expertise in all layers.
Applications are built by layering by one data model on top of another
For each layer, the key question is: how is it represented in terms of the next-lower layer? For
In a complex application there may be more intermediary levels, such as APIs built
upon APIs, but the basic idea is still the same: each layer hides the complexity of the
layers below it by providing a clean data model. These abstractions allow different
groups of people—for example, the engineers at the database vendor and the application
developers using their database—to work together effectively.

The Relational Model and SQL
The most well-known data model today is SQL, based on the relational model proposed by
Edgar Codd in 1970. In this model:
Data is structured into relations (tables in SQL).
Each relation consists of an unordered collection of tuples (rows in SQL).
By the mid-1980s, relational database management systems (RDBMS) and SQL became
the standard tools for storing and querying structured data.
Their dominance has lasted for 25–30 years—an eternity in computing history.

Origins of Relational Databases
Relational databases originated in business data processing on mainframe
computers in the 1960s and ’70s. Early use cases included:

Transaction processing: Handling sales, banking transactions, airline reservations,
and inventory management.
Other databases at that time forced application developers to think a lot about the
internal representation of the data in the database. The goal of the relational model
was to hide that implementation detail behind a cleaner interface.

Batch processing: Customer invoicing, payroll, and reporting.
Even though these use cases may seem mundane today, relational databases provided a
structured and reliable way to manage critical business operations.
Their principles continue to influence modern database systems.

NoSQL (Not only SQL ) born in 2010 out of a meetup..
a distributed open source non-relational database
Driving forces behind the adaptation
• A need for greater scalability than relational databases can easily achieve, includ‐
ing very large datasets or very high write throughput
• A widespread preference for free and open source software over commercial
database products
• Specialized query operations that are not well-supported by the relational model
• Frustration with the restrictiveness of relational schemas, and a desire for a more
dynamic and expressive data model [5]

The main arguments in favor of the document data model are schema flexibility, bet‐
ter performance due to locality, and that for some applications it is closer to the data
structures used by the application. The relational model counters by providing better
support for joins, and many-to-one and many-to-many relationships.


Object-relational mapping (ORM) frameworks like ActiveRecord and Hibernate
reduce the amount of boilerplate code required for this translation layer - objects in the application
code and database model of tables - rows and columns, but they can’t completely hide the differences between the two models
called as the impedance mismatch

For a data structure like a résumé, which is mostly a self-contained document, a JSON
representation can be quite appropriate JSON has the appeal of
being much simpler than XML.It can reduce the impedance mismatch
The one-to-many relationships from the user profile to the user’s positions, educa‐
tional history, and contact information imply a tree structure in the data, and the
JSON representation makes this tree structure explicit

Explains why region_id and industry_id are stored as IDs instead of plain-text strings
like "Greater Seattle Area" and "Philanthropy". Using IDs provides several advantages
over free-text input, particularly when data consistency and usability are important.
Benefits of Using Standardized IDs Instead of Plain-Text Strings

Consistency in Style and Spelling
Users may enter the same region or industry differently
(e.g., "Philanthropy" vs. "Nonprofit Work").
Standardized IDs ensure uniform naming across all profiles.

Avoiding Ambiguity
Some cities share the same name (e.g., Portland, OR vs. Portland, ME).
Using region IDs removes confusion by linking entries to a unique location.

Ease of Updating
If a region or industry name changes (e.g., due to political events), updating the name
in one place updates all references.
No need to modify individual user profiles.

Localization Support
Standardized lists allow seamless translation when the site is available in multiple
languages.
The stored region ID ensures that a user in France sees "Grand Seattle" instead of
"Greater Seattle Area".

Improved Search Capabilities
Structured data enables hierarchical relationships, such as recognizing that
Seattle is part of Washington State.
A search for philanthropists in Washington will correctly include profiles
tagged with Greater Seattle Area.

Conclusion
While free-text input may be more flexible for users,
structured IDs provide greater data integrity, usability, and maintainability.
By offering predefined options in a dropdown list or autocomplete field,
applications enhance user experience while ensuring clean, searchable,
and localized data.

The advantage of using an ID is that because it has no meaning to humans, it never
needs to change: the ID can remain the same, even if the information it identifies
changes. Anything that is meaningful to humans may need to change sometime in
the future—and if that information is duplicated, all the redundant copies need to be
updated. That incurs write overheads, and risks inconsistencies (where some copies
of the information are updated but others aren’t). Removing such duplication is the
key idea behind normalization in databases.

Unfortunately, normalizing this data requires many-to-one relationships (many peo‐
ple live in one particular region, many people work in one particular industry), which
don’t fit nicely into the document model. In relational databases, it’s normal to refer
to rows in other tables by ID, because joins are easy. In document databases, joins are
not needed for one-to-many tree structures, and support for joins is often weak.

If the database itself does not support joins, you have to emulate a join in application
code by making multiple queries to the database. (In this case, the lists of regions and
industries are probably small and slow-changing enough that the application can
simply keep them in memory. But nevertheless, the work of making the join is shifted
from the database to the application code.)

Use organizations as entities
Recommendation - many to many features

While many-to-many relationships and joins are routinely used in relational data‐
bases, document databases and NoSQL reopened the debate on how best to represent
such relationships in a database.

One to many relationships work well in Document DB/NoSQL
Many to many relationships are difficult in NoSQL as such DB's do not support joins

Hierarichal model similar to JSON data structure
Then there was the network model-CODASYL

Document databases reverted back to the hierarchical model in one aspect: storing
nested records (one-to-many relationships, like positions, education, and
contact_info) within their parent record rather than in a separate
table.However, when it comes to representing many-to-one and many-to-many relation‐
ships, relational and document databases are not fundamentally different: in both
cases, the related item is referenced by a unique identifier, which is called a foreign
key in the relational model and a document reference in the document model.
That identifier is resolved at read time by using a join(SQL) or follow-up queries(noSQL).

In a relational database, the query optimizer automatically decides which parts of the
query to execute in which order, and which indexes to use. Those choices are effec‐
tively the “access path,” but the big difference is that they are made automatically by
the query optimizer, not by the application developer, so we rarely need to think
about them.

If you want to query your data in new ways, you can just declare a new index, and
queries will automatically use whichever indexes are most appropriate. You don’t
need to change your queries to take advantage of a new index.
The relational model thus made it much easier to add new features to applications.

Query optimizers for relational databases are complicated beasts, and they have con‐
sumed many years of research and development effort. But a key insight of the
relational model was this: you only need to build a query optimizer once, and then all
applications that use the database can benefit from it. If you don’t have a query opti‐
mizer, it’s easier to handcode the access paths for a particular query than to write a
general-purpose optimizer—but the general-purpose solution wins in the long run.


STORAGE AND RETRIEVAL->how we can store the data that we’re given, and how we
can find it again when we’re asked for it from the database's point of view
how the database handles storage and retrieval internally
Why is it important as an app developer?
Because you do need to select a storage engine that is appropriate for
your application, from the many that are available. In order to tune a storage engine
to perform well on your kind of workload, you need to have a rough idea of what the
storage engine is doing under the hood.

In particular, there is a big difference between storage engines that are optimized for
transactional workloads and those that are optimized for analytics
“Column-Oriented Storage”- discuss a family of storage engines that
is optimized for analytics.

Log structured storage engines and page-oriented storage engines such as B Trees
db_set () {
 echo "$1,$2" >> database
}
db_get () {
 grep "^$1," database | sed -e "s/^$1,//" | tail -n 1
}

Similarly to what
db_set does, many databases internally use a log, which is an append-only data file.
Real databases have more issues to deal with (such as concurrency control, reclaim‐
ing disk space so that the log doesn’t grow forever, and handling errors and partially
written records), but the basic principle is the same. Logs are incredibly useful
The word log is often used to refer to application logs, where an
application outputs text that describes what’s happening. Here, log is used in the more general sense: an append-only
sequence of records. It doesn’t have to be human-readable; it might
be binary and intended only for other programs to read.

On the other hand, our db_get function has terrible performance if you have a large
number of records in your database. Every time you want to look up a key, db_get
has to scan the entire database file from beginning to end, looking for occurrences of
the key. In algorithmic terms, the cost of a lookup is O(n): if you double the number
of records n in your database, a lookup takes twice as long. That’s not good.
In order to efficiently find the value for a particular key in the database, we need a
different data structure: an index. In this chapter we will look at a range of indexing
structures and see how they compare; the general idea behind them is to keep some
additional metadata on the side, which acts as a signpost and helps you to locate the
data you want. If you want to search the same data in several different ways, you may
need several different indexes on different parts of the data.
An index is an additional structure that is derived from the primary data. Many data‐
bases allow you to add and remove indexes, and this doesn’t affect the contents of the
database; it only affects the performance of queries. Maintaining additional structures
incurs overhead, especially on writes. For writes, it’s hard to beat the performance of
simply appending to a file, because that’s the simplest possible write operation. Any
kind of index usually slows down writes, because the index also needs to be updated
every time data is written.
This is an important trade-off in storage systems: well-chosen indexes speed up read
queries, but every index slows down writes. For this reason, databases don’t usually
index everything by default, but require you—the application developer or database
administrator—to choose indexes manually, using your knowledge of the applica‐
tion’s typical query patterns. You can then choose the indexes that give your ap

Index ..like a hashstructure, dictionary
keep an in memory hash map every key to byte offset in the data file- the location at which the
record can be found
When you append new data to the log, also add an entry in the hashmap to reflect
the offset of the data you just wrote
When you want to lookup a value, use the hashmap and the key to get the offset in the
data file, seek to that location and read the value


In earlier days of business data processing, a write to the database involved
a commercial transaction taking place such as placing an order with a supplier,
making a sala,paying an employer's salary. That term  transaction has stuck behind
referring to a group of reads and writes that forms a logical unit


A transaction needn’t necessarily have ACID (atomicity, consis‐
tency, isolation, and durability) properties. Transaction processing
just means allowing clients to make low-latency reads and writes—
as opposed to batch processing jobs, which only run periodically
(for example, once per day).

Over time the use of databases has been expanded for eg social media
and the databases started being used for different kinds of application and data
the basic access pattern remained similar to business transactions
-An application looks up a small number of records by some key using an index
Records are inserted or updated based on the user’s input.
Because these applications are interactive, the access pattern became known as online
transaction processing(OLTP).

However, databases also started being increasingly used for data analytics, which has
very different access patterns. Usually an analytic query needs to scan over a huge
number of records, only reading a few columns per record, and calculates aggregate
statistics (such as count, sum, or average) rather than returning the raw data to the
user. For example, if your data is a table of sales transactions, then analytic queries
might be:
What was the total revenue of each of our stores in January?
• How many more bananas than usual did we sell during our latest promotion?
• Which brand of baby food is most often purchased together with brand X
diapers?

These queries are often written by business analysts, and feed into reports that help
the management of a company make better decisions (business intelligence). In order
to differentiate this pattern of using databases from transaction processing, it has
been called online analytic processing (OLAP)


OLTP (Property Transaction Processing Systems) vs. OLAP (Analytical Systems)

Feature                | OLTP (Transactional Systems)                 | OLAP (Analytical Systems)
---------------------- | -------------------------------------------- | ------------------------------
Main Read Pattern      | Fetches a small number of records per query, usually by key. | Aggregates over a large number of records for analysis.
Main Write Pattern     | Handles random-access, low-latency writes from user input.  | Writes occur in bulk imports (ETL) or continuous event streams.
Primary Users         | End users/customers interacting via a web or mobile application. | Internal analysts using data for business intelligence and decision-making.
Data Representation   | Stores the latest state of data, reflecting the current point in time. | Stores historical events, capturing changes over time.
Dataset Size          | Typically gigabytes to terabytes. | Can scale from terabytes to petabytes.

Key Takeaways:
1. OLTP systems are optimized for fast, concurrent transactions, making them ideal for applications like banking, e-commerce, and inventory management.
2. OLAP systems support complex queries and large-scale data analysis, commonly used for reporting, trend analysis, and business intelligence.
3. ETL (Extract, Transform, Load) processes are central to OLAP, ensuring that structured transactional data is converted into meaningful insights.

TRANSACTION
1)Database software or hardware may fail in the middle of transactions--->lets say during write
2)Application may crash at any time halfway through series of operations
3)Network failures or interruptions can cut the application from database or one
database node from another
4)Several clients may write to database at the same time overwriting each other's changes
5)Client may read partially updated data
6)Race condition may cause suprising bugs
In order to be reliable, a system has to deal with these faults and ensure that they
don’t cause catastrophic failure of the entire system.
However, implementing fault tolerance mechanisms is a lot of work.
It requires a lot of careful thinking about all
the things that can go wrong, and a lot of testing to ensure that the solution actually
works.

For decades, transactions have been the mechanism of choice for simplifying these issues. A transaction is a way for an application to group several reads and writes together into a logical unit. Conceptually, all the reads and writes in a transaction are executed as one operation: either the entire transaction succeeds (commit) or it fails(abort, rollback). If it fails, the application can safely retry. With transactions, error
handling becomes much simpler for an application, because it doesn’t need to worry about partial failure—i.e., the case where some operations succeed and some fail (for whatever reason).

Transactions are not a law of nature; they were cre ated with a purpose, namely to simplify the programming model for applications
accessing a database. By using transactions, the application is free to ignore certain potential error scenarios and concurrency issues, because the database takes care of them instead (we call these safety guarantees).
Not every application needs transactions, and sometimes there are advantages to weakening transactional guarantees or abandoning them entirely (for example, to achieve higher performance or higher availability). Some safety properties can be achieved without transactions.

Safety guarantee provided by transactions comes in the way of scalability
The safety guarantees provided by transactions are often described by the well known acronym ACID,which stands for Atomicity, Consistency, Isolation, and Durability

In the late 2000s, nonrelational (NoSQL) databases started gaining popularity. They aimed to improve upon the relational status quo by offering a choice of new data model, and by including replication and partitioning by default. Transactions were the main casualty of this movement: many
of this new generation of databases abandoned transactions entirely, or redefined the word to describe a much weaker set of guarantees than had previously been understood.

#Atomicity
Atomicity, in computing, refers to an operation that is indivisible and cannot be partially completed. In multi-threaded programming, it ensures that an operation appears as a single, uninterruptible step to other threads.
For example, in multi-threaded programming, if one thread executes an atomic operation, that means there is no way that another thread could see the half-finished result of the operation. The system can only be in the state it was before the operation or after the operation, not something in between.
However, in the context of ACID transactions, atomicity ensures that if a transaction consisting of multiple writes
fails due to a system crash, network failure, or constraint violation, all partial changes are discarded.
This prevents inconsistent or duplicate data, allowing the application to safely retry the transaction without uncertainty.
In other words database saves you from having to worry about partial failure, by giving an all in or nothing guarantee
The defining feature of atomicity is abortability --the ability to abort a transaction entirely if it cannot be fully completed.

#Consistency
In the context of ACID, consistency refers to an application-specific notion of the
database being in a “good state.”
ACID consistency ensures that certain data invariants—rules that must always hold true—are maintained. For example, in an accounting system, total credits and debits must always balance. However, maintaining consistency is primarily the application's responsibility, not the database’s. While databases can enforce some constraints (e.g., foreign keys, uniqueness rules), they cannot prevent application logic errors from introducing invalid data. Unlike atomicity, isolation, and durability, which are database properties, consistency in ACID is an application-level concern, making its inclusion in ACID somewhat debatable.
Thus, some argue that C in ACID doesn’t truly belong, as databases only store data, while applications define what is valid.
Atomicity, isolation, and durability are properties of the database, whereas consistency (in the ACID sense) is a property of the application. 

#Isolation
ACID isolation ensures that concurrently executing transactions do not interfere with each other. The formal definition of isolation is serializability, meaning each transaction behaves as if it were the only one running. Even if transactions execute concurrently, the database guarantees that the final result (once all transactions are committed, ) is equivalent to running them sequentially (one after another).
and that the outcome matches that of a sequential execution

Case 1: Weak Isolation (Read Committed or Repeatable Read)
Bob starts a transaction and sees $1,000.
At the same time, Alice is withdrawing $500 but hasn’t committed yet.
Bob decides to withdraw $700 because he sees $1,000.
If the database allows concurrent transactions without strong isolation, Bob’s withdrawal could be processed before Alice’s withdrawal is committed, leading to overdraft issues.

Case 2: Strong Isolation (Serializable) – Prevents This Issue
To prevent this, the database can use locking mechanisms or optimistic concurrency control:
Locking (Pessimistic Concurrency Control)
When Alice starts withdrawing $500, the database locks her account balance row.
Bob has to wait until Alice’s transaction is committed or rolled back.
If Alice’s transaction commits, Bob will now see $500 available and can no longer withdraw $700.

Optimistic Concurrency Control (Used in Some Databases)
Bob reads the balance as $1,000 and tries to withdraw $700.
When Bob’s transaction tries to commit, the database checks if the balance is still $1,000.
If Alice’s withdrawal has already been committed, the database detects the conflict and reject's Bob transaction

However, in practice, serializable isolation is rarely used, because it carries a performance penalty. Some popular databases, such as Oracle 11g, don’t even implement it.
In Oracle there is an isolation level called “serializable,” but it actually implements
something called snapshot isolation, which is a weaker guarantee than serializability
	

Durability
The purpose of a database system is to provide a safe place where data can be stored without fear of losing it. Durability is the promise that once a transaction has committed successfully, any data it has written will not be forgotten, even if there is a hardware fault or the database crashes.

In a single-node database, durability typically means that the data has been written to nonvolatile storage such as a hard drive or SSD. It usually also involves a write-ahead log (transaction) or similar which allows recovery in the event that the data structures on disk are corrupted. 

In a replicated database, durability may mean that the data has been successfully copied to some number of nodes. 
In order to provide a durability guarantee, a database must wait until these writes or replications are complete before reporting a transaction as successfully committed.
Perfect durability does not exist: if all your hard disks and all your backups are destroyed at the same time, there’s obviously
nothing your database can do to save you.

In practice, there is no one technique that can provide absolute guarantees. There are
only various risk-reduction techniques, including writing to disk, replicating to
remote machines, and backups—and they can and should be used together. As always, it’s wise to take any theoretical “guarantees” with a healthy grain of salt.

Recap - broader picture..
Atomicity
If an error occurs halfway through a sequence of writes, the transaction should be aborted, and the writes made up to that point should be discarded. In other words, the database saves you from having to worry about partial failure, by giving an all-or-nothing guarantee.

Isolation
Concurrently running transactions shouldn’t interfere with each other. For example, if one transaction makes several writes, then another transaction should see either all or none of those writes, but not some subset.	

Scenario 1
Email table, counts of unread message table
An insert is made to email table... before the count is updated..

The user queries the email and sees the new unread email but the count still shows previous or 0-- incorrect
-- Violating isolation: one transaction reads another transaction’s uncommitted writes (a “dirty read”).
-- Isolation guarantee would have prevented that by ensuring that user sees either both the inserted email and the updated counter, or neither, but not an inconsistent halfway point. You can roll both operation in a transaction


Here you need atomicity
if an error occurs somewhere over the course of the transaction, the contents of the mailbox and the unread counter might
become out of sync. In an atomic transaction, if the update to the counter fails, the transaction is aborted and the inserted email is rolled back.
Atomicity ensures that if an error occurs any prior writes from that transaction are undone, to avoid an inconsistent state.


Multi-object transactions require some way of determining which read and write
operations belong to the same transaction. In relational databases, that is typically
done based on the client’s TCP connection to the database server: on any particular connection, everything between a BEGIN TRANSACTION and a COMMIT statement is considered to be part of the same transaction.

Challenge in Joins?



### **Batch Processing vs. Stream Processing**

#### **Batch Processing**
- Involves accumulating data over a fixed interval (e.g., daily) and processing it together.
- Data is **bounded** (has a fixed start and end).
- Processing time can vary, but the output is available only after a certain delay.
- Example: Credit card usage reports (e.g., rolling last 30-day report).
- **Input & Output:** Typically files.
- **Processing Flow:**
  - Parse the file → Convert to a set of records (immutable objects representing events at specific timestamps).
- **Reliability:**
  - Failed tasks are automatically retried, and partial outputs from failed tasks are discarded, ensuring consistent results.
  - This simplifies the programming model.

---

#### **Stream Processing**
- Processes data continuously in real-time, removing fixed intervals.
- Handles each event as it arrives, making the data **unbounded** (continuous stream).
- **Example:** Stock market price updates, real-time fraud detection.
- **Event Representation:**
  - Events are immutable objects containing details of an occurrence and its timestamp.
  - Can be encoded as JSON, text, or binary.
- **Storage & Transport:**
  - Events can be stored in a file, relational table, or document database.
  - Events can be transmitted over the network for further processing.

##### **Key Differences from Batch Processing:**
- In batch processing, a file is written once and read multiple times.
- In streaming, an event is generated once by a producer and consumed by multiple consumers.

##### **Challenges in Streaming Systems:**
- Polling databases for new events is inefficient and increases overhead.
- Instead, **event notification mechanisms** (e.g., message brokers) are used to notify consumers when new events arrive.

---

### **Message Brokers & Event Processing**
A **message broker** (or message queue) is optimized for handling message streams. It acts as an intermediary between producers (publishers) and consumers (subscribers).

#### **Advantages of Message Brokers:**
- Allows producers and consumers to operate independently (handle disconnects, crashes, etc.).
- Supports **asynchronous processing**, meaning producers send messages without waiting for consumers to process them.
- Some brokers store messages in memory, while others persist them to disk for durability.

#### **Message Processing & Delivery Models**
1. **Load Balancing**
   - Messages are distributed among multiple consumers to parallelize processing.
   - Useful for workloads where each message is expensive to process.

2. **Fan-out**
   - Each message is delivered to **all** consumers, allowing multiple independent systems to process the same data.
   - Equivalent to multiple batch jobs reading the same file.

3. **Acknowledgments & Fault Tolerance**
   - Consumers must **acknowledge** messages to confirm processing.
   - If a consumer crashes before acknowledging, the broker redistributes the message to another consumer.
   - This can lead to **message reordering**, which is problematic for dependent events.

---

### **Log-Based Message Brokers (Hybrid Model)**
- Combines the **durable storage** of databases with the **low-latency notifications** of messaging systems.
- Uses a **log structure** (append-only sequence of records) for storage and retrieval.
- **How it Works:**
  - Producer appends messages to a log.
  - Consumers read messages sequentially from the log.
  - If a consumer reaches the end, it waits for a notification about new messages (similar to `tail -f` in Unix).
- **Scalability:**
  - Uses **partitioning** to distribute messages across multiple machines.
  - Each partition maintains a **monotonically increasing sequence number (offset)** to preserve message order within that partition.
  - **No ordering guarantee across partitions.**
- **Performance:**
  - By partitioning and replicating messages across multiple nodes, modern brokers can handle millions of messages per second while maintaining fault tolerance.

---

### **Key Takeaways**
- **Batch processing** works with bounded data and scheduled jobs, while **stream processing** handles real-time, unbounded data.
- **Message brokers** act as intermediaries to manage event-driven communication.
- **Log-based brokers** provide durable storage with high throughput and low-latency notifications.
- Scalability is achieved through **partitioning** and **asynchronous processing**.

This version makes the notes more structured, concise, and readable while preserving all essential details. Let me know if you'd like further refinements! 🚀