What is a classpath
A classpath is an xml file with entry

<classpathentry kind="src" path="src"/>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
	<classpathentry kind="lib" path="spring-beans.jar"/>
	<classpathentry kind="lib" path="spring-context-support.jar"/>
	<classpathentry kind="lib" path="spring-context.jar"/>
	<classpathentry kind="lib" path="spring-core.jar"/>
	<classpathentry kind="output" path="bin"/>
</classpath>

Contains entry for compiled classes , kind=output,kind=src and kind=lib
Basically what all you configure add to build path using UI is added here,If you change the name,has a direcgt impact here
Reflection API is a part of  java.lang package
import java.lang.reflect.*;
Reflection API can be used to analyze the classes, interfaces, methods and fields  at runtime
Getting and setting the object fields directly by getting field reference, regardless of what the access modifier is.

Useful while debugging and testing applications, as it allows direct access to methods, constructors, fields, etc.
Class classVar = Class.forName(�Employee");
Few useful methods 
getDeclaredConstructors()
getDeclaredMethods()
getMethods()
getDeclaringClass()
getDeclaredFields()
Returns an array contaianing the name of all fields delcared in the fields
public static void main(String args[]) {
5 try {
6 Class c = Class.forName(�java.sql.Connection�);
7 Method m[] = c.getDeclaredMethods();
8 for (int i = 0; i < 3; i++) {
9 System.out.println(m[i].toString());
10 }
11 } catch (Throwable e) {
12 System.err.println(e);
13 }




Time of execution
long startTime=System.currentTimeMillis();
long endTime=System.currentTimeMillis();
endTime-startTime=Total time of execution

Interface:

�> If your child classes should all implement a certain group of methods/functionalities but each of the child classes is free to provide its own implementation then use interfaces.

For e.g. if you are implementing a class hierarchy for vehicles implement an interface called Vehicle which has properties like Colour MaxSpeed etc. and methods like Drive(). All child classes like Car Scooter AirPlane SolarCar etc. should derive from this base interface but provide a seperate implementation of the methods and properties exposed by Vehicle.

�> If you want your child classes to implement multiple unrelated functionalities in short multiple inheritance use interfaces.

For e.g. if you are implementing a class called SpaceShip that has to have functionalities from a Vehicle as well as that from a UFO then make both Vehicle and UFO as interfaces and then create a class SpaceShip that implements both Vehicle and UFO .

Abstract Classes

�> When you have a requirement where your base class should provide default implementation of certain methods whereas other methods should be open to being overridden by child classes use abstract classes.

For e.g. again take the example of the Vehicle class above. If we want all classes deriving from Vehicle to implement the Drive() method in a fixed way whereas the other methods can be overridden by child classes. In such a scenario we implement the Vehicle class as an abstract class with an implementation of Drive while leave the other methods / properties as abstract so they could be overridden by child classes.

�> The purpose of an abstract class is to provide a common definition of a base class that multiple derived classes can share.

For example a class library may define an abstract class that is used as a parameter to many of its functions and require programmers using that library to provide their own implementation of the class by creating a derived class.
Use an abstract class

    When creating a class library which will be widely distributed or reused�especially to clients, use an abstract class in preference to an interface; because, it simplifies versioning. This is the practice used by the Microsoft team which developed the Base Class Library. ( COM was designed around interfaces.)

    Use an abstract class to define a common base class for a family of types.

    Use an abstract class to provide default behavior.

    Subclass only a base class in a hierarchy to which the class logically belongs.

 
Use an interface

    When creating a standalone project which can be changed at will, use an interface in preference to an abstract class; because, it offers more design flexibility.

    Use interfaces to introduce polymorphic behavior without subclassing and to model multiple inheritance�allowing a specific type to support numerous behaviors.

    Use an interface to design a polymorphic hierarchy for value types.

    Use an interface when an immutable contract is really intended.

    A well-designed interface defines a very specific range of functionality. Split up interfaces that contain unrelated functionality.

What will happen if you make constructor private?

Declaring the constructor private will ensure that no one outside of the class can directly instantiate the class. In this case, the only way to create an instance of the class is by providing a static public method, as is done when using the Factory Method Pattern.
Additionally, because the constructor is private, the class also cannot be inherited. 

Can private methods be overriden?
Private methods are not inherited by subclasses and hence there is no point of overriding. 
Since the private members cannot be inherited, there is no place for discussion on java runtime overloading or java overriding (polymorphism) features.

OK the compiler wont throw an error (unless you use overriding method)but how will you use it
Example1

class Light {
private void glow() {
System.out.println("Glow glow");
}
}

class SunLight extends Light {
public void glow() {
System.out.println("Call me in your day time!");
}
}

public class SubclassPrivateExample {
public static void main(String args[]) {
SunLight sL = new SunLight();
sL.glow();

light lt=new SunLight();
lt.glow();/*Glow is not visible*/	
}
}


Example 2

class Light {
private void glow() {
System.out.println("Glow glow");
}
}

class SunLight extends Light {

private void glow() {
System.out.println("Call me in your day time!");
}



public static void main(String args[]) {
Light lt=new SunLight();
lt.glow(); /*glow not visible*/
}
}


2.Methods : Methods in the superclass can not be overridden in the subclass by REDUCING THE VISIBILITY.
eg: Public method in the superclass can not be declared again in the subclass as private/protected or default.

3)Exceptions in overriding
�An overriding method can throw 
a)no exception even if overridden method throws any
b)any unchecked exceptions, regardless of whether the overridden method throws exceptions or not. 
c)However the overriding method should not throw checked exceptions that are new or broader than the ones declared by the overridden method. The overriding method can throw narrower or fewer exceptions than the overridden method.
d)Any error

4)
If the argumenst differ,it leads to overloading,not overriding

package learnoverriding;

class Parent
{
	String parent_obj;
}
class Child extends Parent
{
	String child_obj;
}
class Animal{

   public void move(Child child_obj){
      System.out.println("Animals can move");
   }
}

class Dog extends Animal{

   public void move(Parent parent_obj){
      System.out.println("Dogs can walk and run");
   }

}

public class TestDog{

   public static void main(String args[]){
	   Parent parent_obj=new Parent();
	   Child child_obj  =new Child();
     
      Animal a=new Dog();// Animal reference but Dog object
     // a.move(parent_obj); /*Always call Animal method*/
      a.move(child_obj); /*Always call Animal method*//*Shows overloading*/
      
      Dog d = new Dog(); 
      d.move(parent_obj);//Runs the method in Dog class
      d.move(child_obj);//Runs the method in Animal class

   }
}
 
 

5)Overloading is not on basis of return type,only on basis of number,sequence and data type of arguments,not on basis of arguments


Hence thumb rule

Check names--if same go below
1)Check argument list-----

if same---check return type---if same overriding,
if different---duplicate methods


2)If argument list different---overloading(return type may or may not be the same).Basically return type has nothing to do with arguments

with differsnt return typa can still overload

Overloading can happen in child and parent class

class Parent{
		   public void move(){


		      System.out.println("Animals can move");
		   }
	
}


public class ClassOverloading extends Parent {
	

	   public int move(){
		      System.out.println("Dogs can walk and run");
		     
		   }

/*Duplicate method error ,since they are not overloaded,for overloading no of parameters and other should differ*/
//Static methods can be overloaded
class Parent{
	
	   public void move(){
		      System.out.println("Animals can move");
		   }
	
}


public class ClassOverloading extends Parent {
	
	
	 public static int move(float f,int i){
	      System.out.println("Animals can move");
	      return 1;
	   }

	   public static int move(int i,float f){
		      System.out.println("Dogs can walk and run");
		     return 0;
		   }

	
	   public static int move(int i){
		      System.out.println("Dogs can walk and run");
		      return i;
		      
	   }    
		public static void main(String args[]) 
		{
			
			ClassOverloading cl =new ClassOverloading();
			cl.move();
			cl.move(3);
			 //System.out.println(move(3,6));/*Ambiguity error,since int is promoted to float*/
			 System.out.println (move(3F,6));/*No error*/		
			
		}
}
 
6)Static methods cannot be overriden

package learnjava.overloading;

class ParentNew{
	
	   public  static void move(){
		      System.out.println("Static Parent can move");
		   }
	   public  static void move(int i){
		      System.out.println("Static Parent can be overloaded");
		   }
	
}


public class StaticOverloading extends ParentNew {
	
	
	public  static void move(){
	      System.out.println("Static Child can move");
	   }
	    
	
		public static void main(String args[]) 
		{
			
			ParentNew cl= new StaticOverloading();
			StaticOverloading class2= new StaticOverloading();
			cl.move();//Calls baseClass
			cl.move(3);
			class2.move();
			
		}
	   }

Static methods can be redefined in subclass but that doesnt mean they are overridden.
Overriding is done on the basis of type of object and static method are attached to class not to object.Check the refernce
the compiler and JVM don't expect to need an actual instance (object)to invoke the method. And even if you provide one 
(which we did: the instance referred to by f) the JVM will never look at it. The compiler will only look at the 
declared type of the reference(ie its class), and use that declared type to determine, at compile time, which method to call. 
That's what we mean when we say a static method does not have run-time polymorphism.

I
A method that accepts List<Car> wll  not  accept List<Suzuki> even if Suzuki extends  Car