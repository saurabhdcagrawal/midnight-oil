Garbage collection
Multithreading
Design Patterns
Db2 Java
UI
LRU cache
Map
read excel
my profile
Generics
Whats new in Java 8

for a large database joins are expensive,therefore denormalize your data(duplicate it
in multiple tables)

number of employees in each department

//to include apartment with 0 employees
select department.name ,count(*) from department d
left join employee e
on d.dept_id=e.dept_id group by department_name

Join to get data from 2 tables

//left join

//full outer or cartesian join

Cities that are

Beverage name and product code



Cons


a 90
b 80
c 50

//constructor is private ,cannot instantiate the class ,nor inherit
//only way to create an instance of the class ,
is by providing a public static method as using the factory method pattern

//finally block will always be executed even if there is a return in try statement

//finally is optional ,catch is optional but try has to be followed by catch or finally//
finally is used to write clean up code

//final if you add to a reference ,the reference cannot be pointed to a new object

//static variables are class variables ,so they can be accessed by any instance method
// Non static variables ,cannot be accessed in a static method ,create an instance of the class and then
reference it using the object


Java reflection API
 //reflective information about the class and objects during run time such as methods and fields presemt
  in the class during run time//
direct access ro constructor,fields , getting setting object fields regardless
of what the access modifier is used for debugging and testing
//

//function overloading ,calls to function are resolved during compile time
//functions with same name ,same return type ,different input argument list
